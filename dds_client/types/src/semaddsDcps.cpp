//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: semaddsDcps.cpp
//  Source: semaddsDcps.idl
//  Generated: Thu Mar 03 11:45:33 2016
//  OpenSplice V6.5.0p1
//  
//******************************************************************

#include "semaddsDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < SEMADDS_Types::Message, struct MessageSeq_uniq_>;
#endif

const char * SEMADDS_Types::MessageTypeSupportInterface::_local_id = "IDL:SEMADDS_Types/MessageTypeSupportInterface:1.0";

SEMADDS_Types::MessageTypeSupportInterface_ptr SEMADDS_Types::MessageTypeSupportInterface::_duplicate (SEMADDS_Types::MessageTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SEMADDS_Types::MessageTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, SEMADDS_Types::MessageTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SEMADDS_Types::MessageTypeSupportInterface_ptr SEMADDS_Types::MessageTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   SEMADDS_Types::MessageTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (SEMADDS_Types::MessageTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < SEMADDS_Types::MessageTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SEMADDS_Types::MessageTypeSupportInterface_ptr SEMADDS_Types::MessageTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   SEMADDS_Types::MessageTypeSupportInterface_ptr result;
   result = dynamic_cast < SEMADDS_Types::MessageTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SEMADDS_Types::MessageDataWriter::_local_id = "IDL:SEMADDS_Types/MessageDataWriter:1.0";

SEMADDS_Types::MessageDataWriter_ptr SEMADDS_Types::MessageDataWriter::_duplicate (SEMADDS_Types::MessageDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SEMADDS_Types::MessageDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, SEMADDS_Types::MessageDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SEMADDS_Types::MessageDataWriter_ptr SEMADDS_Types::MessageDataWriter::_narrow (DDS::Object_ptr p)
{
   SEMADDS_Types::MessageDataWriter_ptr result = NULL;
   if (p && p->_is_a (SEMADDS_Types::MessageDataWriter::_local_id))
   {
      result = dynamic_cast < SEMADDS_Types::MessageDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SEMADDS_Types::MessageDataWriter_ptr SEMADDS_Types::MessageDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   SEMADDS_Types::MessageDataWriter_ptr result;
   result = dynamic_cast < SEMADDS_Types::MessageDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SEMADDS_Types::MessageDataReader::_local_id = "IDL:SEMADDS_Types/MessageDataReader:1.0";

SEMADDS_Types::MessageDataReader_ptr SEMADDS_Types::MessageDataReader::_duplicate (SEMADDS_Types::MessageDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SEMADDS_Types::MessageDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, SEMADDS_Types::MessageDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SEMADDS_Types::MessageDataReader_ptr SEMADDS_Types::MessageDataReader::_narrow (DDS::Object_ptr p)
{
   SEMADDS_Types::MessageDataReader_ptr result = NULL;
   if (p && p->_is_a (SEMADDS_Types::MessageDataReader::_local_id))
   {
      result = dynamic_cast < SEMADDS_Types::MessageDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SEMADDS_Types::MessageDataReader_ptr SEMADDS_Types::MessageDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   SEMADDS_Types::MessageDataReader_ptr result;
   result = dynamic_cast < SEMADDS_Types::MessageDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SEMADDS_Types::MessageDataReaderView::_local_id = "IDL:SEMADDS_Types/MessageDataReaderView:1.0";

SEMADDS_Types::MessageDataReaderView_ptr SEMADDS_Types::MessageDataReaderView::_duplicate (SEMADDS_Types::MessageDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SEMADDS_Types::MessageDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, SEMADDS_Types::MessageDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SEMADDS_Types::MessageDataReaderView_ptr SEMADDS_Types::MessageDataReaderView::_narrow (DDS::Object_ptr p)
{
   SEMADDS_Types::MessageDataReaderView_ptr result = NULL;
   if (p && p->_is_a (SEMADDS_Types::MessageDataReaderView::_local_id))
   {
      result = dynamic_cast < SEMADDS_Types::MessageDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SEMADDS_Types::MessageDataReaderView_ptr SEMADDS_Types::MessageDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   SEMADDS_Types::MessageDataReaderView_ptr result;
   result = dynamic_cast < SEMADDS_Types::MessageDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



