//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: ChatDcps.cpp
//  Source: ChatDcps.idl
//  Generated: Tue May 24 12:35:14 2016
//  OpenSplice 6.6.2p1
//  
//******************************************************************

#include "ChatDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < Chat::Messages, struct MessagesSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < Chat::User, struct UserSeq_uniq_>;
#endif

const char * Chat::UserTypeSupportInterface::_local_id = "IDL:Chat/UserTypeSupportInterface:1.0";

Chat::UserTypeSupportInterface_ptr Chat::UserTypeSupportInterface::_duplicate (Chat::UserTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Chat::UserTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, Chat::UserTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Chat::UserTypeSupportInterface_ptr Chat::UserTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   Chat::UserTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (Chat::UserTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < Chat::UserTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

Chat::UserTypeSupportInterface_ptr Chat::UserTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   Chat::UserTypeSupportInterface_ptr result;
   result = dynamic_cast < Chat::UserTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * Chat::UserDataWriter::_local_id = "IDL:Chat/UserDataWriter:1.0";

Chat::UserDataWriter_ptr Chat::UserDataWriter::_duplicate (Chat::UserDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Chat::UserDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, Chat::UserDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Chat::UserDataWriter_ptr Chat::UserDataWriter::_narrow (DDS::Object_ptr p)
{
   Chat::UserDataWriter_ptr result = NULL;
   if (p && p->_is_a (Chat::UserDataWriter::_local_id))
   {
      result = dynamic_cast < Chat::UserDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

Chat::UserDataWriter_ptr Chat::UserDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   Chat::UserDataWriter_ptr result;
   result = dynamic_cast < Chat::UserDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * Chat::UserDataReader::_local_id = "IDL:Chat/UserDataReader:1.0";

Chat::UserDataReader_ptr Chat::UserDataReader::_duplicate (Chat::UserDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Chat::UserDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, Chat::UserDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Chat::UserDataReader_ptr Chat::UserDataReader::_narrow (DDS::Object_ptr p)
{
   Chat::UserDataReader_ptr result = NULL;
   if (p && p->_is_a (Chat::UserDataReader::_local_id))
   {
      result = dynamic_cast < Chat::UserDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

Chat::UserDataReader_ptr Chat::UserDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   Chat::UserDataReader_ptr result;
   result = dynamic_cast < Chat::UserDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * Chat::UserDataReaderView::_local_id = "IDL:Chat/UserDataReaderView:1.0";

Chat::UserDataReaderView_ptr Chat::UserDataReaderView::_duplicate (Chat::UserDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Chat::UserDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, Chat::UserDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Chat::UserDataReaderView_ptr Chat::UserDataReaderView::_narrow (DDS::Object_ptr p)
{
   Chat::UserDataReaderView_ptr result = NULL;
   if (p && p->_is_a (Chat::UserDataReaderView::_local_id))
   {
      result = dynamic_cast < Chat::UserDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

Chat::UserDataReaderView_ptr Chat::UserDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   Chat::UserDataReaderView_ptr result;
   result = dynamic_cast < Chat::UserDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * Chat::MessagesTypeSupportInterface::_local_id = "IDL:Chat/MessagesTypeSupportInterface:1.0";

Chat::MessagesTypeSupportInterface_ptr Chat::MessagesTypeSupportInterface::_duplicate (Chat::MessagesTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Chat::MessagesTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, Chat::MessagesTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Chat::MessagesTypeSupportInterface_ptr Chat::MessagesTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   Chat::MessagesTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (Chat::MessagesTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < Chat::MessagesTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

Chat::MessagesTypeSupportInterface_ptr Chat::MessagesTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   Chat::MessagesTypeSupportInterface_ptr result;
   result = dynamic_cast < Chat::MessagesTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * Chat::MessagesDataWriter::_local_id = "IDL:Chat/MessagesDataWriter:1.0";

Chat::MessagesDataWriter_ptr Chat::MessagesDataWriter::_duplicate (Chat::MessagesDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Chat::MessagesDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, Chat::MessagesDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Chat::MessagesDataWriter_ptr Chat::MessagesDataWriter::_narrow (DDS::Object_ptr p)
{
   Chat::MessagesDataWriter_ptr result = NULL;
   if (p && p->_is_a (Chat::MessagesDataWriter::_local_id))
   {
      result = dynamic_cast < Chat::MessagesDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

Chat::MessagesDataWriter_ptr Chat::MessagesDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   Chat::MessagesDataWriter_ptr result;
   result = dynamic_cast < Chat::MessagesDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * Chat::MessagesDataReader::_local_id = "IDL:Chat/MessagesDataReader:1.0";

Chat::MessagesDataReader_ptr Chat::MessagesDataReader::_duplicate (Chat::MessagesDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Chat::MessagesDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, Chat::MessagesDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Chat::MessagesDataReader_ptr Chat::MessagesDataReader::_narrow (DDS::Object_ptr p)
{
   Chat::MessagesDataReader_ptr result = NULL;
   if (p && p->_is_a (Chat::MessagesDataReader::_local_id))
   {
      result = dynamic_cast < Chat::MessagesDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

Chat::MessagesDataReader_ptr Chat::MessagesDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   Chat::MessagesDataReader_ptr result;
   result = dynamic_cast < Chat::MessagesDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * Chat::MessagesDataReaderView::_local_id = "IDL:Chat/MessagesDataReaderView:1.0";

Chat::MessagesDataReaderView_ptr Chat::MessagesDataReaderView::_duplicate (Chat::MessagesDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean Chat::MessagesDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, Chat::MessagesDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

Chat::MessagesDataReaderView_ptr Chat::MessagesDataReaderView::_narrow (DDS::Object_ptr p)
{
   Chat::MessagesDataReaderView_ptr result = NULL;
   if (p && p->_is_a (Chat::MessagesDataReaderView::_local_id))
   {
      result = dynamic_cast < Chat::MessagesDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

Chat::MessagesDataReaderView_ptr Chat::MessagesDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   Chat::MessagesDataReaderView_ptr result;
   result = dynamic_cast < Chat::MessagesDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



